{"version":3,"sources":["components/guest.tsx","components/name.tsx","components/names.tsx","components/form.tsx","components/result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Guest","state","flag","clickGuest","guest","console","log","props","setGuest","setState","className","onClick","React","Component","Name","key","this","id","nameStr","onDelete","Names","names","currentName","error","btn","handleSubmit","event","length","numberofGuests","push","setNames","preventDefault","handleChange","name","target","value","handleDelete","filter","index","handleRandom","setChoice","onSubmit","type","onChange","map","e","b","i","Form","checkNames","handleChoice","setGuests","Result","getRandomName","count","random","Math","floor","App","checkRandom","handleRandomCheck","window","open","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.16c9497c.chunk.js","sourcesContent":["import React from \"react\";\n\ntype MyProps = {\n  setGuest: any;\n};\ntype MyState = {\n  flag: boolean;\n};\nclass Guest extends React.Component<MyProps, MyState> {\n  state: MyState = {\n    flag: false,\n  };\n  render() {\n    console.log(\"guest\");\n    return (\n      <div>\n        <h1>Select Number of Guests</h1>\n        <div className=\"guests-btns\">\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(1);\n            }}\n          >\n            1\n          </button>\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(2);\n            }}\n          >\n            2\n          </button>\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(3);\n            }}\n          >\n            3\n          </button>\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(4);\n            }}\n          >\n            4\n          </button>\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(5);\n            }}\n          >\n            5\n          </button>\n          <button\n            className=\"guests-btn\"\n            onClick={() => {\n              this.clickGuest(6);\n            }}\n          >\n            6\n          </button>\n        </div>\n      </div>\n    );\n  }\n  clickGuest = (guest: number) => {\n    if (!this.state.flag) {\n      console.log(\"here\");\n      this.props.setGuest(guest);\n      this.setState({ flag: true });\n    }\n  };\n}\n\nexport default Guest;\n","import React from \"react\";\n\ntype MyProps = {\n  id: number;\n  nameStr: string;\n  onDelete: any;\n};\n\nclass Name extends React.Component<MyProps> {\n  render() {\n    return (\n      <div>\n        <p key={this.props.id} className=\"name\">\n          {this.props.nameStr}\n          <span\n            className=\"close\"\n            onClick={() => {\n              this.props.onDelete(this.props.id);\n            }}\n          >\n            &times;\n          </span>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Name;\n","import React from \"react\";\nimport Name from \"./name\";\ntype MyProps = {\n  numberofGuests: number;\n  setNames: any;\n  setChoice: any;\n};\ntype MyState = {\n  names: Array<string>;\n  currentName: string;\n  error: Array<string>;\n  btn: any;\n};\nclass Names extends React.Component<MyProps, MyState> {\n  state: MyState = {\n    names: [],\n    currentName: \"\",\n    error: [],\n    btn: [],\n  };\n  render() {\n    // console.log(\"here\");\n    return (\n      <div className=\"names\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            value={this.state.currentName}\n            onChange={this.handleChange}\n          />\n\n          {/* <input type=\"submit\" value=\"Submit\" /> */}\n        </form>\n        {this.state.error.map((e: string, index: number) => {\n          return (\n            <p key={index}>\n              {e}{\" \"}\n              <span\n                className=\"close\"\n                onClick={() => {\n                  this.setState({ error: [] });\n                }}\n              >\n                &times;\n              </span>\n            </p>\n          );\n        })}\n        <div className=\"name-con\">\n          {this.state.names.map((name: string, index: number) => {\n            return (\n              <Name\n                key={index}\n                id={index}\n                nameStr={name}\n                onDelete={this.handleDelete}\n              />\n            );\n          })}\n        </div>\n        <div className=\"random-btn\">\n          {this.state.btn.map((b: string, i: number) => {\n            return (\n              <button key={i} onClick={this.handleRandom}>\n                {b}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  // componentWillUpdate() {\n  //   console.log(\"change occurred\");\n  // }\n  handleSubmit = (event: any) => {\n    if (this.state.names.length < this.props.numberofGuests) {\n      const names = [...this.state.names];\n      names.push(this.state.currentName);\n\n      this.setState({ names: names });\n      this.setState({ currentName: \"\" });\n      this.props.setNames(names);\n      const len: number = this.state.names.length + 1;\n      if (len === this.props.numberofGuests) {\n        console.log(\"here ==\");\n        this.setState({ btn: [\"Select Random\"] });\n      }\n    } else {\n      let error: Array<string> = [...this.state.error];\n      if (error.length === 0) {\n        error.push(\"All names of guests are entred\");\n        this.setState({ error });\n      }\n    }\n    event.preventDefault();\n  };\n\n  handleChange = (event: any) => {\n    const name: string = event.target.value;\n\n    // console.log(name);\n    // names.push();\n    this.setState({ currentName: name });\n\n    // console.log(\"state name: \" + this.state.currentName);\n  };\n  handleDelete = (key: number) => {\n    let names: Array<string> = [...this.state.names];\n    names = names.filter((name: string, index: number) => {\n      return index !== key;\n    });\n    this.setState({ error: [] });\n    this.setState({ names });\n    this.props.setNames(names);\n    this.setState({ btn: [] });\n  };\n  handleRandom = () => {\n    console.log(\"click rand\");\n    this.props.setChoice();\n  };\n}\n\nexport default Names;\n","import React from \"react\";\nimport Guest from \"./guest\";\nimport Names from \"./names\";\n\ntype MyProps = {\n  setNames: any;\n  handleChoice: any;\n};\ntype MyState = {\n  numberofGuests: number; // like this\n};\nclass Form extends React.Component<MyProps, MyState> {\n  state: MyState = {\n    // optional second annotation for better type inference\n    numberofGuests: 0,\n  };\n\n  render() {\n    console.log(\"Form\");\n    return (\n      <div>\n        <Guest setGuest={this.setGuests} />\n        {this.checkNames()}\n      </div>\n    );\n  }\n  checkNames = () => {\n    if (this.state.numberofGuests > 0) {\n      return (\n        <Names\n          numberofGuests={this.state.numberofGuests}\n          setNames={this.props.setNames}\n          setChoice={this.props.handleChoice}\n        />\n      );\n    }\n  };\n  setGuests = (guest: number) => {\n    console.log(\"pressed        \" + guest);\n    this.setState((state) => ({\n      numberofGuests: guest,\n    }));\n  };\n}\n\nexport default Form;\n","import React from \"react\";\n\ntype MyProps = {\n  names: Array<string>;\n};\n\nclass Result extends React.Component<MyProps> {\n  render() {\n    console.log(\"result\");\n    return (\n      <div className=\"result\">\n        <h1>{this.getRandomName()}</h1>\n      </div>\n    );\n  }\n  getRandomName = () => {\n    const count: number = this.props.names.length;\n    const random = Math.floor(Math.random() * count);\n    return this.props.names[random];\n  };\n}\n\nexport default Result;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form\";\nimport Result from \"./components/result\";\n\ntype MyProps = {};\ntype MyState = {\n  names: Array<string>;\n  flag: boolean;\n};\nclass App extends React.Component<MyProps, MyState> {\n  state: MyState = {\n    names: [],\n    flag: false,\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {this.checkRandom()}\n\n          <div className=\"footer\">\n            <div\n              className=\"footer-link\"\n              onClick={() =>\n                window.open(\"https://github.com/ShahrozTanveer\", \"_blank\")\n              }\n            >\n              Github\n            </div>\n            <div\n              className=\"footer-link\"\n              onClick={() =>\n                window.open(\n                  \"https://www.linkedin.com/in/sharoz-tanveer-b55939122/\",\n                  \"_blank\"\n                )\n              }\n            >\n              LinkedIn\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  checkRandom = () => {\n    if (this.state.flag === false) {\n      return (\n        <Form setNames={this.setNames} handleChoice={this.handleRandomCheck} />\n      );\n    } else {\n      return <Result names={this.state.names} />;\n    }\n  };\n  handleRandomCheck = () => {\n    console.log(\"falg chane\");\n    this.setState({ flag: true });\n  };\n  setNames = (names: Array<string>) => {\n    this.setState({ names });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}